// Generated from src/parser/GenericSql.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class GenericSqlLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly SELECT = 5;
	public static readonly ASTERISK = 6;
	public static readonly FROM = 7;
	public static readonly WHERE = 8;
	public static readonly AND = 9;
	public static readonly OR = 10;
	public static readonly NOT = 11;
	public static readonly AS = 12;
	public static readonly LT = 13;
	public static readonly LTE = 14;
	public static readonly GT = 15;
	public static readonly GTE = 16;
	public static readonly EQUALS = 17;
	public static readonly NOT_EQUALS = 18;
	public static readonly IS = 19;
	public static readonly NULL = 20;
	public static readonly CAST = 21;
	public static readonly INDEXED_PARAM = 22;
	public static readonly ID = 23;
	public static readonly DIGIT = 24;
	public static readonly QUOTED_ID = 25;
	public static readonly STRING = 26;
	public static readonly WHITESPACE = 27;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "SELECT", "ASTERISK", "FROM", "WHERE", 
		"AND", "OR", "NOT", "AS", "LT", "LTE", "GT", "GTE", "EQUALS", "NOT_EQUALS", 
		"IS", "NULL", "CAST", "INDEXED_PARAM", "ID", "DIGIT", "QUOTED_ID", "STRING", 
		"WHITESPACE",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'('", "')'", "','", "'.'", "'SELECT'", "'*'", "'FROM'", "'WHERE'", 
		"'AND'", "'OR'", "'NOT'", "'AS'", "'<'", "'<='", "'>'", "'>='", "'='", 
		undefined, "'IS'", "'NULL'", "'CAST'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, "SELECT", "ASTERISK", 
		"FROM", "WHERE", "AND", "OR", "NOT", "AS", "LT", "LTE", "GT", "GTE", "EQUALS", 
		"NOT_EQUALS", "IS", "NULL", "CAST", "INDEXED_PARAM", "ID", "DIGIT", "QUOTED_ID", 
		"STRING", "WHITESPACE",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(GenericSqlLexer._LITERAL_NAMES, GenericSqlLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return GenericSqlLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(GenericSqlLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "GenericSql.g4"; }

	// @Override
	public get ruleNames(): string[] { return GenericSqlLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return GenericSqlLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return GenericSqlLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return GenericSqlLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x1D\xB4\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03" +
		"\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03" +
		"\b\x03\b\x03\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\n\x03" +
		"\n\x03\n\x03\n\x03\v\x03\v\x03\v\x03\f\x03\f\x03\f\x03\f\x03\r\x03\r\x03" +
		"\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x11\x03" +
		"\x11\x03\x11\x03\x12\x03\x12\x03\x13\x03\x13\x03\x13\x03\x13\x05\x13t" +
		"\n\x13\x03\x14\x03\x14\x03\x14\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15" +
		"\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x17\x03\x17\x06\x17\x85\n" +
		"\x17\r\x17\x0E\x17\x86\x03\x17\x03\x17\x03\x18\x03\x18\x07\x18\x8D\n\x18" +
		"\f\x18\x0E\x18\x90\v\x18\x03\x19\x03\x19\x03\x1A\x03\x1A\x07\x1A\x96\n" +
		"\x1A\f\x1A\x0E\x1A\x99\v\x1A\x03\x1A\x03\x1A\x03\x1A\x07\x1A\x9E\n\x1A" +
		"\f\x1A\x0E\x1A\xA1\v\x1A\x03\x1A\x05\x1A\xA4\n\x1A\x03\x1B\x03\x1B\x03" +
		"\x1B\x03\x1B\x07\x1B\xAA\n\x1B\f\x1B\x0E\x1B\xAD\v\x1B\x03\x1B\x03\x1B" +
		"\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x02\x02\x02\x1D\x03\x02\x03\x05\x02\x04" +
		"\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v" +
		"\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!" +
		"\x02\x12#\x02\x13%\x02\x14\'\x02\x15)\x02\x16+\x02\x17-\x02\x18/\x02\x19" +
		"1\x02\x1A3\x02\x1B5\x02\x1C7\x02\x1D\x03\x02\t\x03\x022;\x04\x02B\\aa" +
		"\x05\x022;B\\aa\x03\x02$$\x03\x02bb\x03\x02))\x05\x02\v\f\x0F\x0F\"\"" +
		"\x02\xBB\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02" +
		"\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02" +
		"\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02" +
		"\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02" +
		"\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02" +
		"\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02" +
		"\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03" +
		"\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02" +
		"\x02\x025\x03\x02\x02\x02\x027\x03\x02\x02\x02\x039\x03\x02\x02\x02\x05" +
		";\x03\x02\x02\x02\x07=\x03\x02\x02\x02\t?\x03\x02\x02\x02\vA\x03\x02\x02" +
		"\x02\rH\x03\x02\x02\x02\x0FJ\x03\x02\x02\x02\x11O\x03\x02\x02\x02\x13" +
		"U\x03\x02\x02\x02\x15Y\x03\x02\x02\x02\x17\\\x03\x02\x02\x02\x19`\x03" +
		"\x02\x02\x02\x1Bc\x03\x02\x02\x02\x1De\x03\x02\x02\x02\x1Fh\x03\x02\x02" +
		"\x02!j\x03\x02\x02\x02#m\x03\x02\x02\x02%s\x03\x02\x02\x02\'u\x03\x02" +
		"\x02\x02)x\x03\x02\x02\x02+}\x03\x02\x02\x02-\x82\x03\x02\x02\x02/\x8A" +
		"\x03\x02\x02\x021\x91\x03\x02\x02\x023\xA3\x03\x02\x02\x025\xA5\x03\x02" +
		"\x02\x027\xB0\x03\x02\x02\x029:\x07*\x02\x02:\x04\x03\x02\x02\x02;<\x07" +
		"+\x02\x02<\x06\x03\x02\x02\x02=>\x07.\x02\x02>\b\x03\x02\x02\x02?@\x07" +
		"0\x02\x02@\n\x03\x02\x02\x02AB\x07U\x02\x02BC\x07G\x02\x02CD\x07N\x02" +
		"\x02DE\x07G\x02\x02EF\x07E\x02\x02FG\x07V\x02\x02G\f\x03\x02\x02\x02H" +
		"I\x07,\x02\x02I\x0E\x03\x02\x02\x02JK\x07H\x02\x02KL\x07T\x02\x02LM\x07" +
		"Q\x02\x02MN\x07O\x02\x02N\x10\x03\x02\x02\x02OP\x07Y\x02\x02PQ\x07J\x02" +
		"\x02QR\x07G\x02\x02RS\x07T\x02\x02ST\x07G\x02\x02T\x12\x03\x02\x02\x02" +
		"UV\x07C\x02\x02VW\x07P\x02\x02WX\x07F\x02\x02X\x14\x03\x02\x02\x02YZ\x07" +
		"Q\x02\x02Z[\x07T\x02\x02[\x16\x03\x02\x02\x02\\]\x07P\x02\x02]^\x07Q\x02" +
		"\x02^_\x07V\x02\x02_\x18\x03\x02\x02\x02`a\x07C\x02\x02ab\x07U\x02\x02" +
		"b\x1A\x03\x02\x02\x02cd\x07>\x02\x02d\x1C\x03\x02\x02\x02ef\x07>\x02\x02" +
		"fg\x07?\x02\x02g\x1E\x03\x02\x02\x02hi\x07@\x02\x02i \x03\x02\x02\x02" +
		"jk\x07@\x02\x02kl\x07?\x02\x02l\"\x03\x02\x02\x02mn\x07?\x02\x02n$\x03" +
		"\x02\x02\x02op\x07>\x02\x02pt\x07@\x02\x02qr\x07#\x02\x02rt\x07?\x02\x02" +
		"so\x03\x02\x02\x02sq\x03\x02\x02\x02t&\x03\x02\x02\x02uv\x07K\x02\x02" +
		"vw\x07U\x02\x02w(\x03\x02\x02\x02xy\x07P\x02\x02yz\x07W\x02\x02z{\x07" +
		"N\x02\x02{|\x07N\x02\x02|*\x03\x02\x02\x02}~\x07E\x02\x02~\x7F\x07C\x02" +
		"\x02\x7F\x80\x07U\x02\x02\x80\x81\x07V\x02\x02\x81,\x03\x02\x02\x02\x82" +
		"\x84\x07&\x02\x02\x83\x85\t\x02\x02\x02\x84\x83\x03\x02\x02\x02\x85\x86" +
		"\x03\x02\x02\x02\x86\x84\x03\x02\x02\x02\x86\x87\x03\x02\x02\x02\x87\x88" +
		"\x03\x02\x02\x02\x88\x89\x07&\x02\x02\x89.\x03\x02\x02\x02\x8A\x8E\t\x03" +
		"\x02\x02\x8B\x8D\t\x04\x02\x02\x8C\x8B\x03\x02\x02\x02\x8D\x90\x03\x02" +
		"\x02\x02\x8E\x8C\x03\x02\x02\x02\x8E\x8F\x03\x02\x02\x02\x8F0\x03\x02" +
		"\x02\x02\x90\x8E\x03\x02\x02\x02\x91\x92\t\x02\x02\x02\x922\x03\x02\x02" +
		"\x02\x93\x97\x07$\x02\x02\x94\x96\n\x05\x02\x02\x95\x94\x03\x02\x02\x02" +
		"\x96\x99\x03\x02\x02\x02\x97\x95\x03\x02\x02\x02\x97\x98\x03\x02\x02\x02" +
		"\x98\x9A\x03\x02\x02\x02\x99\x97\x03\x02\x02\x02\x9A\xA4\x07$\x02\x02" +
		"\x9B\x9F\x07b\x02\x02\x9C\x9E\n\x06\x02\x02\x9D\x9C\x03\x02\x02\x02\x9E" +
		"\xA1\x03\x02\x02\x02\x9F\x9D\x03\x02\x02\x02\x9F\xA0\x03\x02\x02\x02\xA0" +
		"\xA2\x03\x02\x02\x02\xA1\x9F\x03\x02\x02\x02\xA2\xA4\x07b\x02\x02\xA3" +
		"\x93\x03\x02\x02\x02\xA3\x9B\x03\x02\x02\x02\xA44\x03\x02\x02\x02\xA5" +
		"\xAB\x07)\x02\x02\xA6\xAA\n\x07\x02\x02\xA7\xA8\x07)\x02\x02\xA8\xAA\x07" +
		")\x02\x02\xA9\xA6\x03\x02\x02\x02\xA9\xA7\x03\x02\x02\x02\xAA\xAD\x03" +
		"\x02\x02\x02\xAB\xA9\x03\x02\x02\x02\xAB\xAC\x03\x02\x02\x02\xAC\xAE\x03" +
		"\x02\x02\x02\xAD\xAB\x03\x02\x02\x02\xAE\xAF\x07)\x02\x02\xAF6\x03\x02" +
		"\x02\x02\xB0\xB1\t\b\x02\x02\xB1\xB2\x03\x02\x02\x02\xB2\xB3\b\x1C\x02" +
		"\x02\xB38\x03\x02\x02\x02\v\x02s\x86\x8E\x97\x9F\xA3\xA9\xAB\x03\x02\x03" +
		"\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!GenericSqlLexer.__ATN) {
			GenericSqlLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(GenericSqlLexer._serializedATN));
		}

		return GenericSqlLexer.__ATN;
	}

}

