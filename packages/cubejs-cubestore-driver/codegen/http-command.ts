// automatically generated by the FlatBuffers compiler, do not modify

import { HttpError } from './http-error.js';
import { HttpQuery } from './http-query.js';
import { HttpResultSet } from './http-result-set.js';


export enum HttpCommand {
  NONE = 0,
  HttpQuery = 1,
  HttpResultSet = 2,
  HttpError = 3
}

export function unionToHttpCommand(
  type: HttpCommand,
  accessor: (obj:HttpError|HttpQuery|HttpResultSet) => HttpError|HttpQuery|HttpResultSet|null
): HttpError|HttpQuery|HttpResultSet|null {
  switch(HttpCommand[type]) {
    case 'NONE': return null; 
    case 'HttpQuery': return accessor(new HttpQuery())! as HttpQuery;
    case 'HttpResultSet': return accessor(new HttpResultSet())! as HttpResultSet;
    case 'HttpError': return accessor(new HttpError())! as HttpError;
    default: return null;
  }
}

export function unionListToHttpCommand(
  type: HttpCommand, 
  accessor: (index: number, obj:HttpError|HttpQuery|HttpResultSet) => HttpError|HttpQuery|HttpResultSet|null, 
  index: number
): HttpError|HttpQuery|HttpResultSet|null {
  switch(HttpCommand[type]) {
    case 'NONE': return null; 
    case 'HttpQuery': return accessor(index, new HttpQuery())! as HttpQuery;
    case 'HttpResultSet': return accessor(index, new HttpResultSet())! as HttpResultSet;
    case 'HttpError': return accessor(index, new HttpError())! as HttpError;
    default: return null;
  }
}
