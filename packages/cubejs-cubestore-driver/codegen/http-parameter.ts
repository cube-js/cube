// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { HttpParameterValue, unionToHttpParameterValue, unionListToHttpParameterValue } from './http-parameter-value.js';


export class HttpParameter {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):HttpParameter {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsHttpParameter(bb:flatbuffers.ByteBuffer, obj?:HttpParameter):HttpParameter {
  return (obj || new HttpParameter()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsHttpParameter(bb:flatbuffers.ByteBuffer, obj?:HttpParameter):HttpParameter {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new HttpParameter()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

valueType():HttpParameterValue {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : HttpParameterValue.NONE;
}

value<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startHttpParameter(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addValueType(builder:flatbuffers.Builder, valueType:HttpParameterValue) {
  builder.addFieldInt8(0, valueType, HttpParameterValue.NONE);
}

static addValue(builder:flatbuffers.Builder, valueOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, valueOffset, 0);
}

static endHttpParameter(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createHttpParameter(builder:flatbuffers.Builder, valueType:HttpParameterValue, valueOffset:flatbuffers.Offset):flatbuffers.Offset {
  HttpParameter.startHttpParameter(builder);
  HttpParameter.addValueType(builder, valueType);
  HttpParameter.addValue(builder, valueOffset);
  return HttpParameter.endHttpParameter(builder);
}
}
