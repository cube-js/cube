// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class BoolValue {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):BoolValue {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsBoolValue(bb:flatbuffers.ByteBuffer, obj?:BoolValue):BoolValue {
  return (obj || new BoolValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsBoolValue(bb:flatbuffers.ByteBuffer, obj?:BoolValue):BoolValue {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new BoolValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

v():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startBoolValue(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addV(builder:flatbuffers.Builder, v:boolean) {
  builder.addFieldInt8(0, +v, +false);
}

static endBoolValue(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createBoolValue(builder:flatbuffers.Builder, v:boolean):flatbuffers.Offset {
  BoolValue.startBoolValue(builder);
  BoolValue.addV(builder, v);
  return BoolValue.endBoolValue(builder);
}
}
