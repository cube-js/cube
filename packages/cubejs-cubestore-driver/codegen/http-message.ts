// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { HttpCommand, unionToHttpCommand, unionListToHttpCommand } from './http-command.js';


export class HttpMessage {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):HttpMessage {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsHttpMessage(bb:flatbuffers.ByteBuffer, obj?:HttpMessage):HttpMessage {
  return (obj || new HttpMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsHttpMessage(bb:flatbuffers.ByteBuffer, obj?:HttpMessage):HttpMessage {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new HttpMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

messageId():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

commandType():HttpCommand {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : HttpCommand.NONE;
}

command<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

connectionId():string|null
connectionId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
connectionId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startHttpMessage(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addMessageId(builder:flatbuffers.Builder, messageId:number) {
  builder.addFieldInt32(0, messageId, 0);
}

static addCommandType(builder:flatbuffers.Builder, commandType:HttpCommand) {
  builder.addFieldInt8(1, commandType, HttpCommand.NONE);
}

static addCommand(builder:flatbuffers.Builder, commandOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, commandOffset, 0);
}

static addConnectionId(builder:flatbuffers.Builder, connectionIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, connectionIdOffset, 0);
}

static endHttpMessage(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishHttpMessageBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedHttpMessageBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createHttpMessage(builder:flatbuffers.Builder, messageId:number, commandType:HttpCommand, commandOffset:flatbuffers.Offset, connectionIdOffset:flatbuffers.Offset):flatbuffers.Offset {
  HttpMessage.startHttpMessage(builder);
  HttpMessage.addMessageId(builder, messageId);
  HttpMessage.addCommandType(builder, commandType);
  HttpMessage.addCommand(builder, commandOffset);
  HttpMessage.addConnectionId(builder, connectionIdOffset);
  return HttpMessage.endHttpMessage(builder);
}
}
