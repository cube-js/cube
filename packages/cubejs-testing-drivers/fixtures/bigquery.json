{
  "cube": {
    "environment": {
      "CUBEJS_DEV_MODE": "true",
      "CUBEJS_API_SECRET": "mysupersecret",
      "CUBEJS_CACHE_AND_QUEUE_DRIVER": "cubestore",
      "CUBEJS_CUBESTORE_HOST": "store",
      "CUBEJS_DB_TYPE": "bigquery",
      "CUBEJS_DB_NAME": "test",
      "CUBEJS_PRE_AGGREGATIONS_SCHEMA": "dev_pre_aggregations",
      "CUBEJS_DB_BQ_PROJECT_ID": "cube-open-source",
      "CUBEJS_DB_BQ_CREDENTIALS": "${DRIVERS_TESTS_CUBEJS_DB_BQ_CREDENTIALS}",

      "CUBEJS_PG_SQL_PORT": "5656",
      "CUBEJS_SQL_USER": "admin",
      "CUBEJS_SQL_PASSWORD": "admin_password",
      "CUBESQL_SQL_PUSH_DOWN": "true",

      "CUBEJS_DB_EXPORT_BUCKET": "cube-open-source-export-bucket",
      "CUBEJS_DB_EXPORT_BUCKET_TYPE": "gcp",
      "CUBEJS_TESSERACT_SQL_PLANNER": "${DRIVERS_TESTS_CUBEJS_TESSERACT_SQL_PLANNER}"
    },
    "ports" : ["4000", "5656"]
  },
  "cast": {
    "SELECT_PREFIX": "",
    "SELECT_SUFFIX": "",
    "DATE_PREFIX": "PARSE_TIMESTAMP('%Y-%m-%d', ",
    "DATE_SUFFIX": ")",
    "CREATE_TBL_PREFIX": "CREATE TABLE ",
    "CREATE_TBL_SUFFIX": " AS ",
    "CREATE_SUB_PREFIX": "(",
    "CREATE_SUB_SUFFIX": ");"
  },
  "tables": {
    "products": "test.products",
    "customers": "test.customers",
    "ecommerce": "test.ecommerce",
    "bigecommerce": "test.bigecommerce"
  },
  "preAggregations": {
    "Products": [],
    "Customers": [
      {
        "name": "RA",
        "measures": ["CUBE.count", "CUBE.runningTotal"]
      }
    ],
    "ECommerce": [
      {
        "name": "SA",
        "dimensions": ["CUBE.productName"],
        "measures": [
          "CUBE.totalQuantity",
          "CUBE.avgDiscount",
          "CUBE.totalSales",
          "CUBE.totalProfit"
        ]
      },
      {
        "name": "TA",
        "time_dimension": "CUBE.orderDate",
        "granularity": "month",
        "partition_granularity": "month",
        "dimensions": ["CUBE.productName"],
        "measures": [
          "CUBE.totalQuantity",
          "CUBE.avgDiscount",
          "CUBE.totalSales",
          "CUBE.totalProfit"
        ]
      },
      {
        "name": "CountByProduct",
        "time_dimension": "CUBE.orderDate",
        "granularity": "month",
        "partition_granularity": "month",
        "dimensions": ["CUBE.productName"],
        "measures": [
          "CUBE.countApproxByCustomer"
        ]
      }
    ],
    "BigECommerce": [
      {
        "name": "TA",
        "time_dimension": "CUBE.orderDate",
        "granularity": "month",
        "partition_granularity": "year",
        "dimensions": ["CUBE.productName", "CUBE.id"],
        "measures": [
          "CUBE.totalQuantity",
          "CUBE.avgDiscount",
          "CUBE.totalSales",
          "CUBE.totalProfit"
        ]
      },
      {
        "name": "MultiTimeDimForCount",
        "time_dimensions": [
          {
            "dimension": "CUBE.completedDate",
            "granularity": "day"
          },
          {
            "dimension": "CUBE.orderDate",
            "granularity": "day"
          }
        ],
        "partition_granularity": "month",
        "measures": [
          "CUBE.count"
        ]
      },
      {
        "name": "CountByProduct",
        "time_dimension": "CUBE.orderDate",
        "granularity": "month",
        "partition_granularity": "month",
        "dimensions": ["CUBE.productName"],
        "measures": [
          "CUBE.countApproxByCustomer"
        ]
      }
    ]
  },
  "skip": [
    "---------------------------------------",
    "Driver tests                           ",
    "---------------------------------------",
    "must download query from the data source via memory",
    "must download query from the data source via stream",

    "---------------------------------------",
    "Core tests                             ",
    "---------------------------------------",
    "for the Customers.RollingExternal",
    "for the Customers.RollingInternal",
    "for the ECommerce.SimpleAnalysisExternal",
    "for the ECommerce.SimpleAnalysisInternal",
    "for the ECommerce.TimeAnalysisExternal",
    "for the ECommerce.TimeAnalysisInternal",

    "---------------------------------------",
    "Full tests                             ",
    "---------------------------------------",
    "querying Customers: dimensions + order + total + offset",
    "querying ECommerce: dimensions + order + total + offset",

    "---------------------------------------",
    "SKIPPED FOR ALL                        ",
    "---------------------------------------",
    "querying Products: dimensions -- doesn't work wo ordering",
    "querying ECommerce: total quantity, avg discount, total sales, total profit by product + order + total -- rounding in athena",
    "querying ECommerce: total sales, total profit by month + order (date) + total -- doesn't work with the BigQuery",
    "querying ECommerce: total quantity, avg discount, total sales, total profit by product + order + total -- noisy test",
    "querying BigECommerce: null sum",
    "querying BigECommerce: null boolean",

    "---------------------------------------",
    "Requires Tesseract.                    ",
    "---------------------------------------",
    "querying BigECommerce: rolling window by 2 day without date range",
    "querying BigECommerce: rolling window by 2 month without date range",
    "querying BigECommerce: rolling window YTD without date range",

    "---------------------------------------",
    "SKIPPED SQL API (Need work)",
    "---------------------------------------",
    "SQL API: reuse params",
    "SQL API: Complex Rollup",
    "SQL API: Rollup with aliases",
    "SQL API: Nested Rollup over asterisk",
    "SQL API: Extended nested Rollup over asterisk"
  ],
  "tesseractSkip": [
    "must download query from the data source via memory",
    "must download query from the data source via stream",
    "for the Customers.RollingExternal",
    "for the Customers.RollingInternal",
    "for the ECommerce.SimpleAnalysisExternal",
    "for the ECommerce.SimpleAnalysisInternal",
    "for the ECommerce.TimeAnalysisExternal",
    "for the ECommerce.TimeAnalysisInternal",
    "querying Customers: dimensions + order + total + offset",
    "querying ECommerce: dimensions + order + total + offset",
    "querying Products: dimensions -- doesn't work wo ordering",
    "querying ECommerce: total quantity, avg discount, total sales, total profit by product + order + total -- rounding in athena",
    "querying ECommerce: total sales, total profit by month + order (date) + total -- doesn't work with the BigQuery",
    "querying ECommerce: total quantity, avg discount, total sales, total profit by product + order + total -- noisy test",
    "querying BigECommerce: null sum",
    "querying BigECommerce: null boolean",
    "querying BigECommerce: rolling window by 2 day without date range",
    "querying BigECommerce: rolling window by 2 month without date range",
    "querying BigECommerce: rolling window YTD without date range",
    "SQL API: reuse params",
    "SQL API: Complex Rollup",
    "SQL API: Rollup with aliases",
    "SQL API: Nested Rollup over asterisk",
    "SQL API: Extended nested Rollup over asterisk",
    "querying custom granularities (with preaggregation) ECommerce: totalQuantity by half_year + no dimension",
    "querying custom granularities (with preaggregation) ECommerce: totalQuantity by half_year + dimension",
    "pre-aggregations Customers: running total without time dimension",
    "querying BigECommerce: rolling count_distinct_approx window by 2 day",
    "querying BigECommerce: rolling count_distinct_approx window by 2 week",
    "querying BigECommerce: rolling count_distinct_approx window by 2 month",
    "querying BigECommerce: totalProfitYearAgo",
    "SQL API: post-aggregate percentage of total",
    "SQL API: Simple Rollup",
    "SQL API: Rollup over exprs",
    "SQL API: Nested Rollup",
    "SQL API: Nested Rollup with aliases",
    "SQL API: Timeshift measure from cube",

    "---- Different results comparing to baseQuery version. Need to investigate ----",
    "SQL API: SQL push down push to cube quoted alias",
    "querying BigECommerce: rolling window YTD (month + week)",
    "querying BigECommerce: rolling window YTD (month + week + no gran)",
    "querying BigECommerce: rolling window YTD without granularity",
    "SQL API: Rolling Window YTD (year + month + day + date_trunc equal)",
    "SQL API: Rolling Window YTD (year + month + day + date_trunc IN)"
  ]
}
