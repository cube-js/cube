
schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.2", for: EXECUTION)
{
  query: Query
}

directive @join__field(graph: join__Graph!, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime
  @join__type(graph: CUBE)

input DateTimeFilter
  @join__type(graph: CUBE)
{
  equals: String
  notEquals: String
  in: [String]
  notIn: [String]
  inDateRange: [String]
  notInDateRange: [String]
  beforeDate: String
  afterDate: String
  set: Boolean
}

input FloatFilter
  @join__type(graph: CUBE)
{
  equals: Float
  notEquals: Float
  in: [Float]
  notIn: [Float]
  set: Boolean
  gt: Float
  lt: Float
  gte: Float
  lte: Float
}

type Fraud
  @join__type(graph: APOLLOSERVER)
{
  id: ID!
  step: Float
  type: String
  isfraud: Int
  amountsum: Float
}

type FraudMembers
  @join__type(graph: CUBE)
{
  count: Float
  amountSum: Float
  step: Float
  newbalancedest: String
  nameorig: String
  oldbalanceorg: String
  namedest: String
  newbalanceorg: String
  oldbalancedest: String
  type: String
  amount: Float
  isFraud: String
  isFlaggedFraud: String
}

input FraudOrderByInput
  @join__type(graph: CUBE)
{
  count: OrderBy
  amountSum: OrderBy
  step: OrderBy
  newbalancedest: OrderBy
  nameorig: OrderBy
  oldbalanceorg: OrderBy
  namedest: OrderBy
  newbalanceorg: OrderBy
  oldbalancedest: OrderBy
  type: OrderBy
  amount: OrderBy
  isFraud: OrderBy
  isFlaggedFraud: OrderBy
}

input FraudWhereInput
  @join__type(graph: CUBE)
{
  AND: [FraudWhereInput!]
  OR: [FraudWhereInput!]
  count: FloatFilter
  amountSum: FloatFilter
  step: FloatFilter
  newbalancedest: StringFilter
  nameorig: StringFilter
  oldbalanceorg: StringFilter
  namedest: StringFilter
  newbalanceorg: StringFilter
  oldbalancedest: StringFilter
  type: StringFilter
  amount: FloatFilter
  isFraud: StringFilter
  isFlaggedFraud: StringFilter
}

scalar join__FieldSet

enum join__Graph {
  APOLLOSERVER @join__graph(name: "apolloserver", url: "https://apollo.examplescube.dev/graphql")
  CUBE @join__graph(name: "cube", url: "https://squealing-marksville.aws-eu-central-1.cubecloudapp.dev/cubejs-api/graphql")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

enum OrderBy
  @join__type(graph: CUBE)
{
  asc
  desc
}

type Query
  @join__type(graph: APOLLOSERVER)
  @join__type(graph: CUBE)
{
  fraudsByAmountSumWithStep(isFraud: Int, stepStart: Int, stepEnd: Int): [Fraud] @join__field(graph: APOLLOSERVER)
  cube(where: RootWhereInput, limit: Int, offset: Int, timezone: String, renewQuery: Boolean, orderBy: RootOrderByInput): [Result!]! @join__field(graph: CUBE)
}

type Result
  @join__type(graph: CUBE)
{
  fraud(where: FraudWhereInput, orderBy: FraudOrderByInput): FraudMembers!
}

input RootOrderByInput
  @join__type(graph: CUBE)
{
  fraud: FraudOrderByInput
}

input RootWhereInput
  @join__type(graph: CUBE)
{
  AND: [RootWhereInput!]
  OR: [RootWhereInput!]
  fraud: FraudWhereInput
}

input StringFilter
  @join__type(graph: CUBE)
{
  equals: String
  notEquals: String
  in: [String]
  notIn: [String]
  contains: String
  notContains: String
  set: Boolean
}

type TimeDimension
  @join__type(graph: CUBE)
{
  value: DateTime!
  second: DateTime!
  minute: DateTime!
  hour: DateTime!
  day: DateTime!
  week: DateTime!
  month: DateTime!
  quarter: DateTime!
  year: DateTime!
}