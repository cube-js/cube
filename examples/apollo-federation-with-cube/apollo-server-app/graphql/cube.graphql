"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input FloatFilter {
  equals: Float
  notEquals: Float
  in: [Float]
  notIn: [Float]
  set: Boolean
  gt: Float
  lt: Float
  gte: Float
  lte: Float
}

input StringFilter {
  equals: String
  notEquals: String
  in: [String]
  notIn: [String]
  contains: String
  notContains: String
  set: Boolean
}

input DateTimeFilter {
  equals: String
  notEquals: String
  in: [String]
  notIn: [String]
  inDateRange: [String]
  notInDateRange: [String]
  beforeDate: String
  afterDate: String
  set: Boolean
}

enum OrderBy {
  asc
  desc
}

type TimeDimension {
  value: DateTime!
  second: DateTime!
  minute: DateTime!
  hour: DateTime!
  day: DateTime!
  week: DateTime!
  month: DateTime!
  quarter: DateTime!
  year: DateTime!
}

type FraudMembers {
  count: Float
  amountSum: Float
  step: Float
  newbalancedest: String
  nameorig: String
  oldbalanceorg: String
  namedest: String
  newbalanceorg: String
  oldbalancedest: String
  type: String
  amount: Float
  isFraud: String
  isFlaggedFraud: String
}

input FraudWhereInput {
  AND: [FraudWhereInput!]
  OR: [FraudWhereInput!]
  count: FloatFilter
  amountSum: FloatFilter
  step: FloatFilter
  newbalancedest: StringFilter
  nameorig: StringFilter
  oldbalanceorg: StringFilter
  namedest: StringFilter
  newbalanceorg: StringFilter
  oldbalancedest: StringFilter
  type: StringFilter
  amount: FloatFilter
  isFraud: StringFilter
  isFlaggedFraud: StringFilter
}

input FraudOrderByInput {
  count: OrderBy
  amountSum: OrderBy
  step: OrderBy
  newbalancedest: OrderBy
  nameorig: OrderBy
  oldbalanceorg: OrderBy
  namedest: OrderBy
  newbalanceorg: OrderBy
  oldbalancedest: OrderBy
  type: OrderBy
  amount: OrderBy
  isFraud: OrderBy
  isFlaggedFraud: OrderBy
}

input RootWhereInput {
  AND: [RootWhereInput!]
  OR: [RootWhereInput!]
  fraud: FraudWhereInput
}

input RootOrderByInput {
  fraud: FraudOrderByInput
}

type Result {
  fraud(where: FraudWhereInput, orderBy: FraudOrderByInput): FraudMembers!
}

type Query {
  cube(where: RootWhereInput, limit: Int, offset: Int, timezone: String, renewQuery: Boolean, orderBy: RootOrderByInput): [Result!]!
}
