version: 2

jobs:
  test:
    resource_class: large
    docker:
      - image: circleci/node:10.16
        environment:
          TEST_PG_USER: root
          TEST_CLICKHOUSE_HOST: localhost
          TEST_LOCAL: true
          TEST_DB_PASSWORD: Test1test
      - image: circleci/redis:5.0.5
      - image: circleci/mysql:5.7
        environment:
          MYSQL_ROOT_PASSWORD: Test1test
      - image: circleci/postgres:9.6.8
        environment:
          POSTGRES_USER: root
          POSTGRES_DB: model_test
      - image: yandex/clickhouse-server:19.10
      - image: mcr.microsoft.com/mssql/server:2017-latest
        environment:
          ACCEPT_EULA: Y
          SA_PASSWORD: Test1test


    working_directory: ~/repo

    steps:
      - checkout

      - restore_cache:
          keys:
            - yarn-packages-v1-{{ .Branch }}-{{ checksum "packages/cubejs-server-core/yarn.lock" }}
            - yarn-packages-v1-{{ .Branch }}-
            - yarn-packages-v1-

      - run: yarn install
      - run: yarn lerna bootstrap --ignore @cubejs-backend/jdbc-driver

      - save_cache:
          paths:
            - ~/.cache/yarn
          key: yarn-packages-v1-{{ .Branch }}-{{ checksum "packages/cubejs-server-core/yarn.lock" }}

      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0
      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:1433 -timeout 2m

      - run: yarn lerna run --concurrency 1 --ignore @cubejs-backend/jdbc-driver test
      - run: bash <(curl -s https://codecov.io/bash)

  lint:
    docker:
      - image: circleci/node:10.16

    working_directory: ~/repo

    steps:
      - checkout
      - restore_cache:
          keys:
            - yarn-packages-v1-{{ .Branch }}-{{ checksum "packages/cubejs-server-core/yarn.lock" }}
            - yarn-packages-v1-{{ .Branch }}-
            - yarn-packages-v1-

      - run: yarn install
      - run: yarn lerna bootstrap --ignore @cubejs-backend/jdbc-driver

      - save_cache:
          paths:
            - ~/.cache/yarn
          key: yarn-packages-v1-{{ .Branch }}-{{ checksum "packages/cubejs-server-core/yarn.lock" }}

      - run: yarn lerna run --concurrency 1 --ignore @cubejs-backend/jdbc-driver lint

  publish:
    resource_class: large
    docker:
      - image: circleci/node:10.16

    working_directory: ~/repo

    steps:
      - checkout
      - restore_cache:
          keys:
            - yarn-packages-v1-{{ .Branch }}-{{ checksum "packages/cubejs-server-core/yarn.lock" }}
            - yarn-packages-v1-{{ .Branch }}-
            - yarn-packages-v1-

      - run: echo //registry.npmjs.org/:_authToken=$NPM_TOKEN > ~/.npmrc
      - run: yarn install
      - run: yarn lerna bootstrap --ignore @cubejs-backend/jdbc-driver

      - save_cache:
          paths:
            - ~/.cache/yarn
          key: yarn-packages-v1-{{ .Branch }}-{{ checksum "packages/cubejs-server-core/yarn.lock" }}

      - run: yarn build
      - run: yarn lerna run --concurrency 1 --ignore @cubejs-backend/jdbc-driver --ignore @cubejs-client/vue build
      - run: ./node_modules/.bin/lerna publish from-git --yes

  build:
    resource_class: large
    docker:
      - image: circleci/node:10.16

    working_directory: ~/repo

    steps:
      - checkout
      - restore_cache:
          keys:
            - yarn-packages-v1-{{ .Branch }}-{{ checksum "packages/cubejs-server-core/yarn.lock" }}
            - yarn-packages-v1-{{ .Branch }}-
            - yarn-packages-v1-

      - run: yarn install
      - run: yarn lerna bootstrap --ignore @cubejs-backend/jdbc-driver

      - save_cache:
          paths:
            - ~/.cache/yarn
          key: yarn-packages-v1-{{ .Branch }}-{{ checksum "packages/cubejs-server-core/yarn.lock" }}

      - run: yarn build
      - run: yarn lerna run --concurrency 1 --ignore @cubejs-backend/jdbc-driver --ignore @cubejs-client/vue build

  react_dashboard_guide:
    docker:
      - image: circleci/node:10.15

    working_directory: ~/repo

    steps:
      - run: |
          if [ "x$AWS_ACCESS_KEY_ID" = "x" ]; then
              circleci-agent step halt
          fi
      - run:
          name: Install awscli
          working_directory: /
          command: |
            sudo apt update
            sudo apt install python-pip python-dev
            pip install awscli --upgrade --user
            PATH=~/.local/bin:$PATH
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID --profile default
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY --profile default
            aws configure set region $AWS_DEFAULT_REGION --profile default
      - checkout
      - restore_cache:
          keys:
            - yarn-guides-v1-{{ .Branch }}-{{ checksum "guides/react-dashboard/yarn.lock" }}
            - yarn-guides-v1-{{ .Branch }}-
            - yarn-guides-v1-

      - run:
          name: Deploy
          working_directory: ~/repo/guides/react-dashboard
          command: |
            PATH="$(yarn global bin):~/.local/bin:$PATH"
            yarn global add @aws-amplify/cli
            amplify init --amplify "{\"envName\":\"prod\"}" --providers "{\"awscloudformation\":{\"useProfile\":true,\"profileName\":\"default\"}}" --yes
            yarn
            yarn deploy

      - save_cache:
          paths:
            - ~/.cache/yarn
          key: yarn-guides-v1-{{ .Branch }}-{{ checksum "guides/react-dashboard/yarn.lock" }}

workflows:
  version: 2
  test:
    jobs:
      - test
      - build
  lint:
    jobs:
      - lint
  publish:
    jobs:
      - publish:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*$/
  guides:
    jobs:
      - react_dashboard_guide
