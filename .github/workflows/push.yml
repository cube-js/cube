name: Build

on:
  push:
    paths:
      - '.github/workflows/push.yml'
      - '.github/workflows/master.yml'
      - 'packages/**'
      - 'rust/js-wrapper/**'
      - 'rust/tsconfig.json'
      - 'rust/package.json'
      - '.eslintrc.js'
      - '.prettierrc'
      - 'package.json'
      - 'lerna.json'
      - 'rollup.config.js'
      - 'yarn.lock'
    branches:
      - 'master'
      # feature or legacy releases
      - 'v*.*.*'
      - 'v*.*'
  pull_request:
    paths:
      - '.github/workflows/push.yml'
      - '.github/workflows/master.yml'
      - 'packages/**'
      - 'rust/js-wrapper/**'
      - 'rust/tsconfig.json'
      - 'rust/package.json'
      - '.eslintrc.js'
      - '.prettierrc'
      - 'package.json'
      - 'lerna.json'
      - 'rollup.config.js'
      - 'yarn.lock'

jobs:
  unit:
    runs-on: ubuntu-20.04
    timeout-minutes: 60

    strategy:
      matrix:
        # We should use our minimal version, but there are problems with packages...
        node-version: [10.x, 12.x, 14.x, 15.x]
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          # pulls all commits (needed for codecov)
          fetch-depth: 2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Restore lerna
        uses: actions/cache@v2
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: |
            ~/.npm
            node_modules
            rust/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-workspace-main-${{ matrix.node-version }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-workspace-main-${{ matrix.node-version }}-
      - name: Set Yarn version
        run: yarn policies set-version v1.22.5
      - name: Yarn install
        run: CUBESTORE_SKIP_POST_INSTALL=true yarn install --frozen-lockfile
      - name: Lerna tsc
        run: yarn tsc
      - name: Build client
        run: yarn build
      - name: Lerna test
        run: yarn lerna run --concurrency 1 --stream --no-prefix unit
      - uses: codecov/codecov-action@v1
        if: (matrix.node-version == '15.x')
        with:
          files: ./packages/*/coverage/clover.xml
          verbose: true # optional (default = false)

  lint:
    runs-on: ubuntu-20.04
    timeout-minutes: 60

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Use Node.js 14.x
        uses: actions/setup-node@v1
        with:
          node-version: 14.x
      - name: Restore lerna
        uses: actions/cache@v2
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: |
            ~/.npm
            node_modules
            rust/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-workspace-main-14.x-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-workspace-main-14.x-
      - name: Set Yarn version
        run: yarn policies set-version v1.22.5
      - name: Yarn install
        run: CUBESTORE_SKIP_POST_INSTALL=true yarn install --frozen-lockfile
      - name: NPM lint
        run: yarn lint:npm
      - name: Lerna lint
        run: yarn lerna run --concurrency 1 lint

  build:
    runs-on: ubuntu-20.04
    timeout-minutes: 60

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Use Node.js 14.x
        uses: actions/setup-node@v1
        with:
          node-version: 14.x
      - name: Restore lerna
        uses: actions/cache@v2
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: |
            ~/.npm
            node_modules
            rust/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-workspace-main-14.x-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-workspace-main-14.x-
      - name: Set Yarn version
        run: yarn policies set-version v1.22.5
      - name: Yarn install
        run: CUBESTORE_SKIP_POST_INSTALL=true yarn install --frozen-lockfile
      - name: Check Yarn lock wasn't modified
        run: if [ "$(git status | grep nothing)x" = "x" ]; then echo "Non empty changeset after lerna bootstrap"; git status; exit 1; else echo "Nothing to commit. Proceeding"; fi;
      - name: Build Core Client libraries
        run: yarn build
      - name: Build other packages
        run: yarn lerna run --concurrency 1 build

  integration-redis:
    needs: [unit, lint]
    runs-on: ubuntu-20.04
    timeout-minutes: 60

    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        node-version: [12.x]
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Restore lerna
        uses: actions/cache@v2
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: |
            ~/.npm
            node_modules
            rust/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-workspace-main-${{ matrix.node-version }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-workspace-main-${{ matrix.node-version }}-
      - name: Set Yarn version
        run: yarn policies set-version v1.22.5
      - name: Yarn install
        run: CUBESTORE_SKIP_POST_INSTALL=true yarn install --frozen-lockfile
      - name: Lerna tsc
        run: yarn tsc
      - name: Run Redis Integration with Redis Driver
        timeout-minutes: 10
        run: |
          yarn lerna run --concurrency 1 --stream --no-prefix integration:redis
        env:
          CUBEJS_REDIS_USE_IOREDIS: false
      - name: Run Redis Integration with IORedis Driver
        timeout-minutes: 10
        run: |
          yarn lerna run --concurrency 1 --stream --no-prefix integration:redis
        env:
          CUBEJS_REDIS_USE_IOREDIS: true
      - name: Setup Redis Cluster
        uses: vishnudxb/redis-cluster@1.0.5
        with:
          master1-port: 5000
          master2-port: 5001
          master3-port: 5002
          slave1-port: 5003
          slave2-port: 5004
          slave3-port: 5005
      - name: Run Redis Integration with Cluster
        timeout-minutes: 10
        run: |
          yarn lerna run --concurrency 1 --stream --no-prefix integration:redis
        env:
          CUBEJS_REDIS_USE_IOREDIS: true
          CUBEJS_REDIS_SENTINEL: "redis+sentinel://localhost:5000,localhost:5001,localhost:5002/mymaster/0"

  integration:
    needs: [unit, lint]
    runs-on: ubuntu-20.04
    timeout-minutes: 60

    strategy:
      matrix:
        node-version: [12.x]
        db: ['clickhouse', 'druid', 'elasticsearch', 'mssql', 'mysql', 'postgres', 'prestodb', 'mysql-aurora-serverless', 'cubestore']
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Restore lerna
        uses: actions/cache@v2
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: |
            ~/.npm
            node_modules
            rust/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-workspace-main-${{ matrix.node-version }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-workspace-main-${{ matrix.node-version }}-
      - name: Set Yarn version
        run: yarn policies set-version v1.22.5
      - name: Yarn install
        run: CUBESTORE_SKIP_POST_INSTALL=true yarn install --frozen-lockfile
      - name: Lerna tsc
        run: yarn tsc
      - name: Run Integration tests for ${{ matrix.db }} matrix
        timeout-minutes: 30
        run: ./.github/actions/integration/${{ matrix.db }}.sh

  docker-image-latest-set-tag:
    # At least git should be completed pushed up until this moment
    needs: [lint]
    runs-on: ubuntu-20.04
    outputs:
      tag: ${{ steps.get-tag.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - id: get-tag
        run: echo "::set-output name=tag::$(git tag --contains $GITHUB_SHA)"
        env:
          GITHUB_SHA: ${{ github.sha }}

  docker-image-latest:
    needs: docker-image-latest-set-tag
    name: Build & Test :latest for ${{ matrix.name }} without pushing
    runs-on: ubuntu-20.04
    timeout-minutes: 60
    if: (!contains(needs['docker-image-latest-set-tag'].outputs.tag, 'v'))
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    strategy:
      matrix:
        dockerfile:
          - latest.Dockerfile
          - latest-alpine.Dockerfile
        include:
          - dockerfile: latest.Dockerfile
            name: Debian
            tag: tmp-latest
          - dockerfile: latest-alpine.Dockerfile
            tag: tmp-alpine
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host
      - name: Build only
        uses: docker/build-push-action@v2
        timeout-minutes: 30
        with:
          context: ./packages/cubejs-docker
          file: ./packages/cubejs-docker/${{ matrix.dockerfile }}
          platforms: linux/amd64
          push: true
          tags: localhost:5000/cubejs/cube:${{ matrix.tag }}
      - name: Use Node.js 15.x
        uses: actions/setup-node@v1
        with:
          node-version: 15.x
      - name: Restore lerna
        uses: actions/cache@v2
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: |
            ~/.npm
            node_modules
            rust/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-workspace-main-15.x-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-workspace-main-15.x-
      - name: Set Yarn version
        run: yarn policies set-version v1.22.5
      - name: Yarn install
        run: CUBESTORE_SKIP_POST_INSTALL=true yarn install --frozen-lockfile
      - name: Build client
        run: yarn build
      - name: Lerna tsc
        run: yarn tsc
      - name: Testing Docker image via BirdBox
        run: |
          cd packages/cubejs-testing/
          export BIRDBOX_CUBEJS_VERSION=${{ matrix.tag }}
          export BIRDBOX_CUBEJS_REGISTRY_PATH=localhost:5000/
          export DEBUG=testcontainers
          yarn run dataset:minimal
          yarn run birdbox:postgresql

  docker-dev:
    needs: [build, unit, lint]
    name: Build & Test :dev for ${{ matrix.name }} without pushing
    runs-on: ubuntu-20.04
    timeout-minutes: 60
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    strategy:
      matrix:
        dockerfile:
          - dev.Dockerfile
          - dev-alpine.Dockerfile
        include:
          - dockerfile: dev.Dockerfile
            name: Debian
            tag: tmp-dev
          - dockerfile: dev-alpine.Dockerfile
            name: Alpine
            tag: tmp-dev-alpine
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host
      - name: Build image
        uses: docker/build-push-action@v2
        timeout-minutes: 30
        with:
          context: .
          file: ./packages/cubejs-docker/${{ matrix.dockerfile }}
          platforms: linux/amd64
          push: true
          tags: localhost:5000/cubejs/cube:${{ matrix.tag }}
      - name: Use Node.js 15.x
        uses: actions/setup-node@v1
        with:
          node-version: 15.x
      - name: Restore lerna
        uses: actions/cache@v2
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: |
            ~/.npm
            node_modules
            rust/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-workspace-main-15.x-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-workspace-main-15.x-
      - name: Set Yarn version
        run: yarn policies set-version v1.22.5
      - name: Yarn install
        run: CUBESTORE_SKIP_POST_INSTALL=true yarn install --frozen-lockfile
      - name: Build client
        run: yarn build
      - name: Lerna tsc
        run: yarn tsc
      - name: Testing Docker image via BirdBox
        run: |
          cd packages/cubejs-testing/
          export BIRDBOX_CUBEJS_VERSION=${{ matrix.tag }}
          export BIRDBOX_CUBEJS_REGISTRY_PATH=localhost:5000/
          export DEBUG=testcontainers
          yarn run dataset:minimal
          yarn run birdbox:postgresql
      - name: Testing Docker image via Cypress (Chrome)
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          BIRDBOX_CYPRESS_UPDATE_SCREENSHOTS: ${{ contains(github.event.head_commit.message, '[update screenshots]') }}
        run: |
          cd packages/cubejs-testing/
          export BIRDBOX_CUBEJS_VERSION=${{ matrix.tag }}
          export BIRDBOX_CUBEJS_REGISTRY_PATH=localhost:5000/
          export BIRDBOX_CYPRESS_BROWSER=chrome
          export BIRDBOX_CYPRESS_TARGET=postgresql
          export DEBUG=testcontainers
          yarn run cypress:install
          yarn run cypress:birdbox
      - name: Upload screenshots on failure
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cypress-screenshots-docker-dev-${{ matrix.name }}
          path: packages/cubejs-testing/cypress/screenshots
