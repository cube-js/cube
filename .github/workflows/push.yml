name: CI

on: [push]

jobs:
  unit:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [10.x, 12.x, 14.x]
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Restore lerna
        uses: actions/cache@v2
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: |
            ~/.npm
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - name: Yarn install
        uses: borales/actions-yarn@v2.3.0
        with:
          cmd: install
      - name: Lerna bootstrap
        run: yarn lerna bootstrap --ignore @cubejs-backend/jdbc-driver
      - name: Lerna tsc
        run: yarn lerna run --concurrency 1 tsc
      - name: Lerna test
        run: yarn lerna run --concurrency 1 --ignore @cubejs-backend/jdbc-driver unit

  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Use Node.js 14.x
        uses: actions/setup-node@v1
        with:
          node-version: 14.x
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Restore lerna
        uses: actions/cache@v2
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: |
            ~/.npm
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - name: Yarn install
        uses: borales/actions-yarn@v2.3.0
        with:
          cmd: install
      - name: Lerna bootstrap
        run: yarn lerna bootstrap --ignore @cubejs-backend/jdbc-driver
      - name: Lerna lint
        run: yarn lerna run --concurrency 1 --ignore @cubejs-backend/jdbc-driver lint

  integration-wrk-1:
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        node-version: [10.x]
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Restore lerna
        uses: actions/cache@v2
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: |
            ~/.npm
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - name: Yarn install
        uses: borales/actions-yarn@v2.3.0
        with:
          cmd: install
      - name: Lerna bootstrap
        run: yarn lerna bootstrap --ignore @cubejs-backend/jdbc-driver
      - name: Lerna tsc
        run: yarn lerna run --concurrency 1 tsc
      - name: Run Postgres Integration with 9.6
        run: |
          docker pull postgres:${TEST_PGSQL_VERSION}
          yarn lerna run --concurrency 1 --ignore @cubejs-backend/jdbc-driver integration:postgres
        env:
          TEST_PGSQL_VERSION: 9.6
      - name: Run Postgres Integration with 10
        run: |
          docker pull postgres:${TEST_PGSQL_VERSION}
          yarn lerna run --concurrency 1 --ignore @cubejs-backend/jdbc-driver integration:postgres
        env:
          TEST_PGSQL_VERSION: 10
      - name: Run Postgres Integration with 11
        run: |
          docker pull postgres:${TEST_PGSQL_VERSION}
          yarn lerna run --concurrency 1 --ignore @cubejs-backend/jdbc-driver integration:postgres
        env:
          TEST_PGSQL_VERSION: 11
      - name: Run Postgres Integration with 12
        run: |
          docker pull postgres:${TEST_PGSQL_VERSION}
          yarn lerna run --concurrency 1 --ignore @cubejs-backend/jdbc-driver integration:postgres
        env:
          TEST_PGSQL_VERSION: 12
      - name: Run MS SQL Integration with 2017-latest
        run: |
          docker pull mcr.microsoft.com/mssql/server:${TEST_MSSQL_VERSION}
          yarn lerna run --concurrency 1 --ignore @cubejs-backend/jdbc-driver integration:mssql
        env:
          TEST_MSSQL_VERSION: 2017-latest
      - name: Run MS SQL Integration with 2019-latest
        run: |
          docker pull mcr.microsoft.com/mssql/server:${TEST_MSSQL_VERSION}
          yarn lerna run --concurrency 1 --ignore @cubejs-backend/jdbc-driver integration:mssql
        env:
          TEST_MSSQL_VERSION: 2019-latest

  integration-wrk-2:
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        node-version: [10.x]
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Restore lerna
        uses: actions/cache@v2
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: |
            ~/.npm
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - name: Yarn install
        uses: borales/actions-yarn@v2.3.0
        with:
          cmd: install
      - name: Lerna bootstrap
        run: yarn lerna bootstrap --ignore @cubejs-backend/jdbc-driver
      - name: Lerna tsc
        run: yarn lerna run --concurrency 1 tsc
      - name: Run MySQL Integration with 5.6
        run: |
          docker pull mysql:${TEST_MYSQL_VERSION}
          yarn lerna run --concurrency 1 --ignore @cubejs-backend/jdbc-driver integration:mysql
        env:
          TEST_MYSQL_VERSION: 5.6
      - name: Run MySQL Integration with 5.7
        run: |
          docker pull mysql:${TEST_MYSQL_VERSION}
          yarn lerna run --concurrency 1 --ignore @cubejs-backend/jdbc-driver integration:mysql
        env:
          TEST_MYSQL_VERSION: 5.7
      - name: Run Clickhouse Integration with 20.6
        run: |
          docker pull yandex/clickhouse-server:${TEST_CLICKHOUSE_VERSION}
          yarn lerna run --concurrency 1 --ignore @cubejs-backend/jdbc-driver integration:clickhouse
        env:
          TEST_CLICKHOUSE_VERSION: 20.6
      - name: Run Clickhouse Integration with 20
        run: |
          docker pull yandex/clickhouse-server:${TEST_CLICKHOUSE_VERSION}
          yarn lerna run --concurrency 1 --ignore @cubejs-backend/jdbc-driver integration:clickhouse
        env:
          TEST_CLICKHOUSE_VERSION: 20
      - name: Run Clickhouse Integration with 19
        run: |
          docker pull yandex/clickhouse-server:${TEST_CLICKHOUSE_VERSION}
          yarn lerna run --concurrency 1 --ignore @cubejs-backend/jdbc-driver integration:clickhouse
        env:
          TEST_CLICKHOUSE_VERSION: 19
