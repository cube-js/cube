name: Rust

on:
  push:
    paths:
      - '.github/workflows/rust.yml'
      - 'rust/**'
    branches-ignore:
      - master
  pull_request:
    paths:
      - '.github/workflows/rust.yml'
      - 'rust/**'

jobs:
  debian:
    name: Debian Rust ${{ matrix.rust }}
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        rust: [nightly-2020-10-25]
    env:
      RUST: ${{ matrix.rust }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
          components: rustfmt
      - uses: Swatinem/rust-cache@v1
      - name: Run cargo fmt cubestore
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --manifest-path rust/cubestore/Cargo.toml -- --check
      - name: Run cargo fmt cubehll
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --manifest-path rust/cubehll/Cargo.toml -- --check
      - name: Run cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --manifest-path rust/Cargo.toml -j 4
      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path rust/Cargo.toml -j 1

  docker-image-latest:
    name: Build only :latest image
    runs-on: ubuntu-latest
    timeout-minutes: 60
    if: github.ref != 'refs/heads/master'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Build only
        uses: docker/build-push-action@v2
        timeout-minutes: 60
        with:
          context: ./rust/
          file: ./rust/Dockerfile
          platforms: linux/amd64
          push: false
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

  cross:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      matrix:
        target:
          #- x86_64-unknown-linux-musl
          # procspawn is using libc::kill(pid as i32, libc::SIGKILL) which is not supported in windows
          # - x86_64-pc-windows-gnu
          - x86_64-apple-darwin
        include:
          #- os: ubuntu-latest
          #  target: x86_64-unknown-linux-musl
          #  artifact_name: rust/target/x86_64-unknown-linux-musl/release/miniserve
          #  # Maybe will be enabled later
          #  cross: false
          #  strip: true
          #- os: windows-latest
          #  target: x86_64-pc-windows-msvc
          #  artifact_name: rust/target/x86_64-pc-windows-msvc/release/cubestored.exe
          #  cross: false
          #  strip: true
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: rust/target/x86_64-apple-darwin/release/cubestored
            cross: false
            strip: true
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2020-10-25
          target: ${{ matrix.target }}
          override: true
          components: rustfmt
      - uses: Swatinem/rust-cache@v1
      - run: rust/cross/scripts/${{ matrix.os }}-install.sh
        shell: bash
      # https://github.com/actions-rs/cargo/issues/6
      #- uses: actions-rs/cargo@v1
      - uses: marcopolo/cargo@master
        with:
          working-directory: rust
          command: build
          args: --release --locked --target=${{ matrix.target }}
          use-cross: ${{ matrix.cross }}
      - name: Compress binaries
        uses: svenstaro/upx-action@v2
        with:
          file: ${{ matrix.artifact_name }}
          args: --lzma
          strip: ${{ matrix.strip }}
