use crate::compile::{DatabaseVariable, DatabaseVariables};
use datafusion::scalar::ScalarValue;

pub fn defaults() -> DatabaseVariables {
    let variables = [
        DatabaseVariable::system(
            "max_allowed_packet".to_string(),
            ScalarValue::UInt32(Some(67108864)),
            None,
        ),
        DatabaseVariable::system(
            "auto_increment_increment".to_string(),
            ScalarValue::UInt32(Some(1)),
            None,
        ),
        DatabaseVariable::system(
            "version_comment".to_string(),
            ScalarValue::Utf8(Some("mysql".to_string())),
            None,
        ),
        DatabaseVariable::system(
            "system_time_zone".to_string(),
            ScalarValue::Utf8(Some("UTC".to_string())),
            None,
        ),
        DatabaseVariable::system(
            "time_zone".to_string(),
            ScalarValue::Utf8(Some("SYSTEM".to_string())),
            None,
        ),
        DatabaseVariable::system(
            "tx_isolation".to_string(),
            ScalarValue::Utf8(Some("REPEATABLE-READ".to_string())),
            None,
        ),
        DatabaseVariable::system(
            "tx_read_only".to_string(),
            ScalarValue::Boolean(Some(false)),
            None,
        ),
        DatabaseVariable::system(
            "transaction_isolation".to_string(),
            ScalarValue::Utf8(Some("REPEATABLE-READ".to_string())),
            None,
        ),
        DatabaseVariable::system(
            "transaction_read_only".to_string(),
            ScalarValue::Boolean(Some(false)),
            None,
        ),
        DatabaseVariable::system(
            "sessiontransaction_isolation".to_string(),
            ScalarValue::Utf8(Some("REPEATABLE-READ".to_string())),
            None,
        ),
        DatabaseVariable::system(
            "sessionauto_increment_increment".to_string(),
            ScalarValue::Int64(Some(1)),
            None,
        ),
        DatabaseVariable::system(
            "character_set_client".to_string(),
            ScalarValue::Utf8(Some("utf8mb4".to_string())),
            None,
        ),
        DatabaseVariable::system(
            "character_set_connection".to_string(),
            ScalarValue::Utf8(Some("utf8mb4".to_string())),
            None,
        ),
        DatabaseVariable::system(
            "character_set_results".to_string(),
            ScalarValue::Utf8(Some("utf8mb4".to_string())),
            None,
        ),
        DatabaseVariable::system(
            "character_set_server".to_string(),
            ScalarValue::Utf8(Some("utf8mb4".to_string())),
            None,
        ),
        DatabaseVariable::system(
            "collation_connection".to_string(),
            ScalarValue::Utf8(Some("utf8mb4_general_ci".to_string())),
            None,
        ),
        DatabaseVariable::system(
            "collation_server".to_string(),
            ScalarValue::Utf8(Some("utf8mb4_0900_ai_ci".to_string())),
            None,
        ),
        DatabaseVariable::system(
            "init_connect".to_string(),
            ScalarValue::Utf8(Some("".to_string())),
            None,
        ),
        DatabaseVariable::system(
            "interactive_timeout".to_string(),
            ScalarValue::Int32(Some(28800)),
            None,
        ),
        DatabaseVariable::system(
            "license".to_string(),
            ScalarValue::Utf8(Some("Apache 2".to_string())),
            None,
        ),
        DatabaseVariable::system(
            "lower_case_table_names".to_string(),
            ScalarValue::Int32(Some(0)),
            None,
        ),
        DatabaseVariable::system(
            "net_buffer_length".to_string(),
            ScalarValue::Int32(Some(16384)),
            None,
        ),
        DatabaseVariable::system(
            "net_write_timeout".to_string(),
            ScalarValue::Int32(Some(600)),
            None,
        ),
        DatabaseVariable::system(
            "wait_timeout".to_string(),
            ScalarValue::Int32(Some(28800)),
            None,
        ),
        DatabaseVariable::system(
            "sql_mode".to_string(),
            ScalarValue::Utf8(Some("ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION".to_string())),
            None,
        ),
    ];

    let variables = IntoIterator::into_iter(variables)
        .map(|v| (v.name.clone(), v))
        .collect::<DatabaseVariables>();

    variables
}
